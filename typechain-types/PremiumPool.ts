/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PremiumPoolInterface extends utils.Interface {
  contractName: "PremiumPool";
  functions: {
    "accountIdCounter()": FunctionFragment;
    "accountIdToAccount(uint256)": FunctionFragment;
    "buyCoverage(uint8,uint256)": FunctionFragment;
    "createAccount(uint8)": FunctionFragment;
    "loanIdToPremiumPoolAmount(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerAddressToAccountId(address)": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "referenceObligation()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setReferenceObligation(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawPremium()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountIdToAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCoverage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIdToPremiumPoolAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerAddressToAccountId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referenceObligation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setReferenceObligation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPremium",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountIdToAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCoverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIdToPremiumPoolAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerAddressToAccountId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referenceObligation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferenceObligation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPremium",
    data: BytesLike
  ): Result;

  events: {
    "AccountCreated(address,uint256)": EventFragment;
    "CoverageBought(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PremiumPoolInitialized(address,address)": EventFragment;
    "PremiumWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CoverageBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumPoolInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumWithdrawn"): EventFragment;
}

export type AccountCreatedEvent = TypedEvent<
  [string, BigNumber],
  { _owner: string; _accountId: BigNumber }
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export type CoverageBoughtEvent = TypedEvent<
  [string, BigNumber],
  { _buyer: string; _premiumAmount: BigNumber }
>;

export type CoverageBoughtEventFilter = TypedEventFilter<CoverageBoughtEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PremiumPoolInitializedEvent = TypedEvent<
  [string, string],
  { _paymentTokenAddress: string; _referenceObligationAddress: string }
>;

export type PremiumPoolInitializedEventFilter =
  TypedEventFilter<PremiumPoolInitializedEvent>;

export type PremiumWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  { _withdrawer: string; _premiumAmount: BigNumber }
>;

export type PremiumWithdrawnEventFilter =
  TypedEventFilter<PremiumWithdrawnEvent>;

export interface PremiumPool extends BaseContract {
  contractName: "PremiumPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PremiumPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountIdCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    accountIdToAccount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string] & {
        Id: BigNumber;
        LoanId: number;
        PremiumAmount: BigNumber;
        Owner: string;
      }
    >;

    buyCoverage(
      _loanId: BigNumberish,
      _premiumAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAccount(
      _loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loanIdToPremiumPoolAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerAddressToAccountId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    referenceObligation(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferenceObligation(
      _referenceObligationAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawPremium(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  accountIdToAccount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, string] & {
      Id: BigNumber;
      LoanId: number;
      PremiumAmount: BigNumber;
      Owner: string;
    }
  >;

  buyCoverage(
    _loanId: BigNumberish,
    _premiumAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAccount(
    _loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loanIdToPremiumPoolAmount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerAddressToAccountId(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  referenceObligation(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferenceObligation(
    _referenceObligationAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawPremium(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    accountIdToAccount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string] & {
        Id: BigNumber;
        LoanId: number;
        PremiumAmount: BigNumber;
        Owner: string;
      }
    >;

    buyCoverage(
      _loanId: BigNumberish,
      _premiumAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(
      _loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    loanIdToPremiumPoolAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerAddressToAccountId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    referenceObligation(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setReferenceObligation(
      _referenceObligationAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawPremium(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AccountCreated(address,uint256)"(
      _owner?: null,
      _accountId?: null
    ): AccountCreatedEventFilter;
    AccountCreated(_owner?: null, _accountId?: null): AccountCreatedEventFilter;

    "CoverageBought(address,uint256)"(
      _buyer?: null,
      _premiumAmount?: null
    ): CoverageBoughtEventFilter;
    CoverageBought(
      _buyer?: null,
      _premiumAmount?: null
    ): CoverageBoughtEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PremiumPoolInitialized(address,address)"(
      _paymentTokenAddress?: null,
      _referenceObligationAddress?: null
    ): PremiumPoolInitializedEventFilter;
    PremiumPoolInitialized(
      _paymentTokenAddress?: null,
      _referenceObligationAddress?: null
    ): PremiumPoolInitializedEventFilter;

    "PremiumWithdrawn(address,uint256)"(
      _withdrawer?: null,
      _premiumAmount?: null
    ): PremiumWithdrawnEventFilter;
    PremiumWithdrawn(
      _withdrawer?: null,
      _premiumAmount?: null
    ): PremiumWithdrawnEventFilter;
  };

  estimateGas: {
    accountIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    accountIdToAccount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyCoverage(
      _loanId: BigNumberish,
      _premiumAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAccount(
      _loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loanIdToPremiumPoolAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerAddressToAccountId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    referenceObligation(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferenceObligation(
      _referenceObligationAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawPremium(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountIdToAccount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyCoverage(
      _loanId: BigNumberish,
      _premiumAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAccount(
      _loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loanIdToPremiumPoolAmount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerAddressToAccountId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referenceObligation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferenceObligation(
      _referenceObligationAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawPremium(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
