/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ReferenceObligation {
  export type LoanStruct = {
    Protocol: string;
    ExpirationTimestamp: BigNumberish;
    PrincipalAmountInUSD: BigNumberish;
    InterestAmountInUSD: BigNumberish;
    CollateralAmountInUSD: BigNumberish;
    RepaidAmountInUSD: BigNumberish;
    IsDefaulted: boolean;
  };

  export type LoanStructOutput = [
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    Protocol: string;
    ExpirationTimestamp: number;
    PrincipalAmountInUSD: BigNumber;
    InterestAmountInUSD: BigNumber;
    CollateralAmountInUSD: BigNumber;
    RepaidAmountInUSD: BigNumber;
    IsDefaulted: boolean;
  };
}

export interface ReferenceObligationInterface extends utils.Interface {
  contractName: "ReferenceObligation";
  functions: {
    "checkIsDefaulted(uint8)": FunctionFragment;
    "checkIsExpired()": FunctionFragment;
    "getMaxLoss(uint8)": FunctionFragment;
    "loanCounter()": FunctionFragment;
    "loanIdToLoan(uint256)": FunctionFragment;
    "loanIdToLoanAddress(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "referenceObligation()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setIsDefaulted(uint8,bool)": FunctionFragment;
    "setIsExpired(bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkIsDefaulted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIsExpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLoss",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanIdToLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIdToLoanAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referenceObligation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIsDefaulted",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsExpired",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkIsDefaulted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIsExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMaxLoss", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIdToLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIdToLoanAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referenceObligation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsDefaulted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ReferenceObligationInitialized(string,uint32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReferenceObligationInitialized"
  ): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ReferenceObligationInitializedEvent = TypedEvent<
  [string, number, boolean],
  { _name: string; _expirationTimestamp: number; _isExpired: boolean }
>;

export type ReferenceObligationInitializedEventFilter =
  TypedEventFilter<ReferenceObligationInitializedEvent>;

export interface ReferenceObligation extends BaseContract {
  contractName: "ReferenceObligation";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReferenceObligationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkIsDefaulted(
      _loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkIsExpired(overrides?: CallOverrides): Promise<[boolean]>;

    getMaxLoss(
      _loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    loanCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    loanIdToLoan(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        Protocol: string;
        ExpirationTimestamp: number;
        PrincipalAmountInUSD: BigNumber;
        InterestAmountInUSD: BigNumber;
        CollateralAmountInUSD: BigNumber;
        RepaidAmountInUSD: BigNumber;
        IsDefaulted: boolean;
      }
    >;

    loanIdToLoanAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    referenceObligation(
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean] & {
        Name: string;
        ExpirationTimestamp: number;
        IsExpired: boolean;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsDefaulted(
      _loanId: BigNumberish,
      _isDefaulted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsExpired(
      _isExpired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  checkIsDefaulted(
    _loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkIsExpired(overrides?: CallOverrides): Promise<boolean>;

  getMaxLoss(
    _loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  loanCounter(overrides?: CallOverrides): Promise<BigNumber>;

  loanIdToLoan(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      Protocol: string;
      ExpirationTimestamp: number;
      PrincipalAmountInUSD: BigNumber;
      InterestAmountInUSD: BigNumber;
      CollateralAmountInUSD: BigNumber;
      RepaidAmountInUSD: BigNumber;
      IsDefaulted: boolean;
    }
  >;

  loanIdToLoanAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  referenceObligation(
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean] & {
      Name: string;
      ExpirationTimestamp: number;
      IsExpired: boolean;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsDefaulted(
    _loanId: BigNumberish,
    _isDefaulted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsExpired(
    _isExpired: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkIsDefaulted(
      _loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkIsExpired(overrides?: CallOverrides): Promise<boolean>;

    getMaxLoss(
      _loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanCounter(overrides?: CallOverrides): Promise<BigNumber>;

    loanIdToLoan(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        Protocol: string;
        ExpirationTimestamp: number;
        PrincipalAmountInUSD: BigNumber;
        InterestAmountInUSD: BigNumber;
        CollateralAmountInUSD: BigNumber;
        RepaidAmountInUSD: BigNumber;
        IsDefaulted: boolean;
      }
    >;

    loanIdToLoanAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    referenceObligation(
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean] & {
        Name: string;
        ExpirationTimestamp: number;
        IsExpired: boolean;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setIsDefaulted(
      _loanId: BigNumberish,
      _isDefaulted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsExpired(_isExpired: boolean, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ReferenceObligationInitialized(string,uint32,bool)"(
      _name?: null,
      _expirationTimestamp?: null,
      _isExpired?: null
    ): ReferenceObligationInitializedEventFilter;
    ReferenceObligationInitialized(
      _name?: null,
      _expirationTimestamp?: null,
      _isExpired?: null
    ): ReferenceObligationInitializedEventFilter;
  };

  estimateGas: {
    checkIsDefaulted(
      _loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIsExpired(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLoss(
      _loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanCounter(overrides?: CallOverrides): Promise<BigNumber>;

    loanIdToLoan(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanIdToLoanAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    referenceObligation(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsDefaulted(
      _loanId: BigNumberish,
      _isDefaulted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsExpired(
      _isExpired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkIsDefaulted(
      _loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIsExpired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaxLoss(
      _loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanIdToLoan(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanIdToLoanAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referenceObligation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsDefaulted(
      _loanId: BigNumberish,
      _isDefaulted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsExpired(
      _isExpired: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
