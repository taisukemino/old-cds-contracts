/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "CoveragePayouts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoveragePayouts__factory>;
    getContractFactory(
      name: "CoveragePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoveragePool__factory>;
    getContractFactory(
      name: "ICoveragePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoveragePool__factory>;
    getContractFactory(
      name: "ILPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILPToken__factory>;
    getContractFactory(
      name: "IReferenceObligation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReferenceObligation__factory>;
    getContractFactory(
      name: "LPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPToken__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "PremiumPayouts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PremiumPayouts__factory>;
    getContractFactory(
      name: "PremiumPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PremiumPool__factory>;
    getContractFactory(
      name: "PremiumPricing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PremiumPricing__factory>;
    getContractFactory(
      name: "ReferenceObligation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReferenceObligation__factory>;
    getContractFactory(
      name: "ICoveragePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICoveragePool__factory>;
    getContractFactory(
      name: "ILPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILPToken__factory>;
    getContractFactory(
      name: "IReferenceObligation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReferenceObligation__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;

    getContractAt(
      name: "CoveragePayouts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoveragePayouts>;
    getContractAt(
      name: "CoveragePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoveragePool>;
    getContractAt(
      name: "ICoveragePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoveragePool>;
    getContractAt(
      name: "ILPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILPToken>;
    getContractAt(
      name: "IReferenceObligation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReferenceObligation>;
    getContractAt(
      name: "LPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LPToken>;
    getContractAt(
      name: "Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "PremiumPayouts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PremiumPayouts>;
    getContractAt(
      name: "PremiumPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PremiumPool>;
    getContractAt(
      name: "PremiumPricing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PremiumPricing>;
    getContractAt(
      name: "ReferenceObligation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReferenceObligation>;
    getContractAt(
      name: "ICoveragePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICoveragePool>;
    getContractAt(
      name: "ILPToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILPToken>;
    getContractAt(
      name: "IReferenceObligation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReferenceObligation>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
